docker version
docker info (show )

docker container run --publish 80:80 nginx
docker container run --publish 80:80 --detach nginx (run background)

docker container rm -f 8d1 45d 4o2 (remove by force by id need few char in id)

docker container ls (runing container)
docker container ls -a (all containers)

docker run --name mongo -d mongo (run mongo in background(-d))

docker container top mongo(all process runing in mongo container)
docker container inspect (details contain config)
docker container stats (performance stats of containser)

23
docker container run -it(start new container interactively)
docker container exec -it(run additional command in existing container)
docker container run -it --name proxy nginx bash (shell prompt)
type "exit" to checkout the shell 
Note: container stop automatically
docker container start -ai ubuntu(restart same containser)

edit runing container
docker container exec -it mysql bash

Task
docker container run --publish 80:80 --name nginx -d nginx

24
docker container run -p 80:80 --name webhost -d nginx(run nginx -p publish -d detach)
docker container port webhost(find port and ip)
docker container inspect --format '{{ .NetworkSettings.IPAddress}}' webhost(find ACTUAL(Note) IP )
Diagram()

26(Netwrok)

Docker network ls (list of network)
docker newtwork inspect webhost
docker netwrok create my_netwrok( create default call bridge netwrok)
docker container run -d --name new_nginx --netwrok my_netwrok nginx(create new container with netwrok)
docker netwrok inspect my_network(show the added new_nginx in my_netwrok)
docker network connect my_netwrok webhost (connect exist container webhost=container my_netwrok is new create netwrok)
docker container inspect webhost(look for new netwrok attach or not)
docker network disconnect my_netwrok webhost

27(DNS)
docker container run -d --name my_nginx --netwrok my_netwrok nginx(create new container with netwrok)
docker container exec -it my_nginx ping new_nginx(execte ping in same DNS two container)

03 Container Images Where To Find Them and How To Build Them
32
Image is binary file exectable no need to os that way it is different from VM
33
docker images ls
docker pull nginx:1.11.9(pull new image with verions)
Docker Hub offical image etc
 

34 Image layer
 docker image history <name>
docker image inspect <name>
Note( pull image ones and make version of after that call as layer layer have uniqe sh)
Note IMP for Diagram

35(Tag it is like versioning same repo have multiple tag you can pull as per need if you pull twise it only pull extra file of that repo like layer)
$ docker pull nginx (and) $docker pull nginx:mainline(same id not pull new image just pull extra fils and make layer)
Note : tag help to pull same image with diff-2 extra feature when we dev.
$docker login

36 
DockerFile

37
docker image build -t customer . (-t is tag (.) all files)

38 build image extending office image
IMP for push image in hub
docker image build -t customer .
docker image tag customer:lastes paritosh535/cutomer:lates|1.0
docker image push <img name>(paritosh535/cutomer:lates)

04 Container Lifetime  Persistent Data Volumes Volumes Volumes
41
Valume(create location to store data/access .it is consisten when you delete cantainer)
bind Host(mape host file/dirctory to the container)
42
$docker valume ls
docker container run -d --name mysql12 -e MYSQL_ALLOW_EMPTY_PASSWORD=True -v mysql_db:/var/lib/mysql mysql( -v create valume for mysql name is mysql_db:<locations>
docker valume ls(see the name of valuem is "mysql_db")

docker container run -d --name mysql13 -e MYSQL_ALLOW_EMPTY_PASSWORD=True -v mysql_db:/var/lib/mysql mysql(name is mysql3 but use same valume mysql_db)

docker valume create (Create valume)

43(bind host)
docker container run -d --name nginx -p 80:80 -v $(pwd):/usr/share/nginx/html nginx ( edit file in host reflected in container)

05 Making It Easier with Docker Compose The Multi-Container Tool

48(Structure)
Docker-compose up
docker-compose up -d(-detach run background)
docker-compose down(stop all container and remove cont/vol/net)

06 Swarm Intro and Creating a 3-Node Swarm Cluster
55 intro
56
docker info(check swarm is enable or not)
docker swarm init(enable)
docker node ls(ledger node)
docker service create alpine ping 8.8.8.8(service like RUN cmd)
docker service ls(service list)
docker service ps <press tab> (See the node col one serive with 1/1)
docker container ls
docker service update <ID> --replicas 3(ID from docker service ls(service list))
docker service ls (see there is update 1/1 to 3/3 )
docker service ps <press tab> (See the node col 3 service with 3/3)
docker update(update continer without restarting)

docker container rm -f <name of one container>(remove or shoutdown any contianre 3 of then)
docker service ls(quick fire this cmd see 2/3)
docker service ls(after 24 second it will create  one more replicat check with "docker service ls")
docker service ps <name>(for history shoutdown or what happen )
docker service rm <name>(remove all service automatic remove container withen seconds)

58 Create node
check docker-machine installation
docker-machine create node1(create node for distributed)
docker-machine ssh node1(access of machine)
docker-machine env node1(second way to access machine)
$ eval $(docker-machine env node1)(check docker info name=<host> is change to name=node1 docker connected to node)






